{"version":3,"sources":["webpack:///0.0f9f78a2ec042fd6c9ed.hot-update.js","webpack:///./public/client/store/configureStore.prod.js?563f"],"names":["webpackHotUpdate","247","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_redux","_reduxLogger","_reduxThunk","_reduxThunk2","_reducers","_reducers2","enhancer","applyMiddleware","store","createStore"],"mappings":"AAAAA,iBAAiB,GAEXC,IACA,SAAUC,EAAQC,EAASC,GAEjC,YAuBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GApBvFG,OAAOC,eAAeP,EAAS,cAC7BQ,UCTF,IAAAC,GAAAR,EAAA,GAEAS,GADAT,EAAA,KACAA,EAAA,KACAU,GDeoBT,EAAuBQ,GCf3CT,EAAA,MDmBIW,EAAeV,EAAuBS,GClB1CE,EAAAZ,EAAA,IDsBIa,EAAaZ,EAAuBW,GC6BlCE,KAASN,EAAAO,iBAAAJ,EAAAP,SACTY,KAAQR,EAAAS,aAAAJ,EAAAT,QAAoBU,EDgClCf,GAAQK,QCvBOY","file":"0.0f9f78a2ec042fd6c9ed.hot-update.js","sourcesContent":["webpackHotUpdate(0,{\n\n/***/ 247:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _redux = __webpack_require__(2);\n\nvar _reduxDevtools = __webpack_require__(245);\n\nvar _reduxLogger = __webpack_require__(82);\n\nvar _reduxLogger2 = _interopRequireDefault(_reduxLogger);\n\nvar _reduxThunk = __webpack_require__(248);\n\nvar _reduxThunk2 = _interopRequireDefault(_reduxThunk);\n\nvar _reducers = __webpack_require__(45);\n\nvar _reducers2 = _interopRequireDefault(_reducers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// const createStoreWithMiddleware = applyMiddleware(\n//   logger\n// )(createStore)\n\n\n// export default function configureStore(initialState) {\n//   //Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。\n//   const store = createStoreWithMiddleware(reducer, initialState)\n\n//   /*模块热替换(hot module replacement)\n//   它属于试验性功能, 测试不够\n//     预计有一些 bug\n//     理论上可用在生成环境, 然而在严肃的场合或许太早\n//     模块 id 需要在多个编译过程被追踪, 你需要存储(records)\n//     优化器在第一次优化之后不再能够优化模块 id. 对 bundle 体积有影响\n//     HMR 运行时增加了 bundle 的体积\n//     生成环境需要额外的测试代码检验 HMR 处理器. 挺难做的.\n//   */\n//   if (module.hot) {\n//     // Enable Webpack hot module replacement for reducers\n//     module.hot.accept('../reducers', () => {\n//       const nextReducer = require('../reducers')\n//       store.replaceReducer(nextReducer)\n//     })\n//   }\n\n//   return store\n// }\n\n//创建store两者都可以\n\n//一个应用了 middleware 后的 store enhancer。\n//这个 store enhancer 就是一个函数，并且需要应用到 createStore。它会返回一个应用了 middleware 的新的 createStore。\n//let createStoreWithMiddleware = applyMiddleware(logger)(createStore);\n\n//是否使用combineReducers\n//combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。\n//可以差分出去\n//let reducer = combineReducers({index});\n//let store = createStoreWithMiddleware(reducer);\n//let store = createStoreWithMiddleware(reducers);\n\n\n//const rootEl = document.getElementById('root');\n\n//enhancer增强 (Function): Store enhancer 是一个组合 store creator 的高阶函数，\n//返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。\n//applyMiddleware是 Redux 的原生方法，作用是将所有中间件组成一个数组，依次执行。\nvar enhancer = (0, _redux.applyMiddleware)(_reduxThunk2.default);\nvar store = (0, _redux.createStore)(_reducers2.default, enhancer);\n// let store;\n// //环境的判断\n// if (AppSettings.Env==\"PROD\") {\n//   store = createStore(reducer);\n// } else {\n//   store = createStore(reducer,applyMiddleware(logger));\n// }\n\nexports.default = store;\n\n/***/ })\n\n})\n\n\n// WEBPACK FOOTER //\n// 0.0f9f78a2ec042fd6c9ed.hot-update.js","import { createStore, applyMiddleware,combineReducers,compose } from 'redux';\nimport { persistState } from 'redux-devtools';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\n\n// const createStoreWithMiddleware = applyMiddleware(\n//   logger\n// )(createStore)\n\n\n// export default function configureStore(initialState) {\n//   //Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。\n//   const store = createStoreWithMiddleware(reducer, initialState)\n\n//   /*模块热替换(hot module replacement)\n//   它属于试验性功能, 测试不够\n//     预计有一些 bug\n//     理论上可用在生成环境, 然而在严肃的场合或许太早\n//     模块 id 需要在多个编译过程被追踪, 你需要存储(records)\n//     优化器在第一次优化之后不再能够优化模块 id. 对 bundle 体积有影响\n//     HMR 运行时增加了 bundle 的体积\n//     生成环境需要额外的测试代码检验 HMR 处理器. 挺难做的.\n//   */\n//   if (module.hot) {\n//     // Enable Webpack hot module replacement for reducers\n//     module.hot.accept('../reducers', () => {\n//       const nextReducer = require('../reducers')\n//       store.replaceReducer(nextReducer)\n//     })\n//   }\n\n//   return store\n// }\n\n//创建store两者都可以\n\n//一个应用了 middleware 后的 store enhancer。\n//这个 store enhancer 就是一个函数，并且需要应用到 createStore。它会返回一个应用了 middleware 的新的 createStore。\n//let createStoreWithMiddleware = applyMiddleware(logger)(createStore);\n\n//是否使用combineReducers\n//combineReducers 辅助函数的作用是，把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数，然后就可以对这个 reducer 调用 createStore。\n //可以差分出去\n //let reducer = combineReducers({index});\n //let store = createStoreWithMiddleware(reducer);\n //let store = createStoreWithMiddleware(reducers);\n\n\n//const rootEl = document.getElementById('root');\n\n//enhancer增强 (Function): Store enhancer 是一个组合 store creator 的高阶函数，\n//返回一个新的强化过的 store creator。这与 middleware 相似，它也允许你通过复合函数改变 store 接口。\n//applyMiddleware是 Redux 的原生方法，作用是将所有中间件组成一个数组，依次执行。\nconst enhancer=applyMiddleware(thunk);\nconst store = createStore(reducer,enhancer);\n// let store;\n// //环境的判断\n// if (AppSettings.Env==\"PROD\") {\n//   store = createStore(reducer);\n// } else {\n//   store = createStore(reducer,applyMiddleware(logger));\n// }\n\nexport default store;\n\n\n// WEBPACK FOOTER //\n// ./public/client/store/configureStore.prod.js"],"sourceRoot":""}