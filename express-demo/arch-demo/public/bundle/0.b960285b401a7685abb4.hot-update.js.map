{"version":3,"sources":["webpack:///0.b960285b401a7685abb4.hot-update.js","webpack:///./public/client/index.js?85bc"],"names":["webpackHotUpdate","43","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_react","_react2","_reactDom","_reactRedux","_reactRouter","_reactRouterRedux","_configureStore","_configureStore2","_components","_components2","rootEl","document","getElementById","store","history","syncHistoryWithStore","browserHistory","render","createElement","Provider","Router","Route","path","component"],"mappings":"AAAAA,iBAAiB,GAEXC,GACA,SAAUC,EAAQC,EAASC,GAEjC,YAyBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GC9BvF,GAAAG,GAAAL,EAAA,GDUIM,EAAUL,EAAuBI,GCTrCE,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GAEAS,EAAAT,EAAA,IACAU,EAAAV,EAAA,IACAW,EAAAX,EAAA,IDgBIY,EAAmBX,EAAuBU,GCf9CE,EAAAb,EAAA,IDmBIc,EAAeb,EAAuBY,GChBpCE,GAFNf,EAAA,IAEegB,SAASC,eAAe,SAEjCC,YACAC,KAAUT,EAAAU,sBAAAX,EAAAY,eAAqCH,MAsBrDX,EAAAe,QACEhB,EAAAF,QAAAmB,cAAAf,EAAAgB,UAAUN,MAAOA,GACfZ,EAAAF,QAAAmB,cAAAd,EAAAgB,QAAQN,QAASA,GACfb,EAAAF,QAAAmB,cAAAd,EAAAiB,OAAOC,KAAK,IAAIC,UAAAd,EAAAV,SACdE,EAAAF,QAAAmB,cAAAd,EAAAiB,OAAOC,KAAK,OAAOC,UAAAd,EAAAV,UACnBE,EAAAF,QAAAmB,cAAAd,EAAAiB,OAAOC,KAAK,OAAOC,UAAAd,EAAAV,aAIzBW","file":"0.b960285b401a7685abb4.hot-update.js","sourcesContent":["webpackHotUpdate(0,{\n\n/***/ 43:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _react = __webpack_require__(0);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = __webpack_require__(0);\n\nvar _reactRedux = __webpack_require__(5);\n\nvar _reactRouter = __webpack_require__(29);\n\nvar _reactRouterRedux = __webpack_require__(93);\n\nvar _configureStore = __webpack_require__(36);\n\nvar _configureStore2 = _interopRequireDefault(_configureStore);\n\nvar _components = __webpack_require__(35);\n\nvar _components2 = _interopRequireDefault(_components);\n\nvar _preact = __webpack_require__(37);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar rootEl = document.getElementById('root');\n//import createHistory from \"history/createBrowserHistory\";\n\n\nvar store = _configureStore2.default;\nvar history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.browserHistory, store);\n//const history = createHistory();\n\n// Get the current location.\n//const location = history.location\n\n// Listen for changes to the current location.\n// const unlisten = history.listen((location, action) => {\n//   // location is an object like window.location\n//   console.log(action, location.pathname, location.state);\n\n// })\n\n// Use push, replace, and go to navigate around.\n// history.push('/', { some: 'state' })\n\n// // To stop listening, call the function returned from listen().\n// unlisten()\n//react-redux 提供Provider组件，可以让容器组件拿到state。\n//Provider在根组件外面包了一层，这样一来，根组件的所有子组件就默认都可以拿到state了。\n//render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。\n//再次render()，只附加事件处理程序，从而拥有非常高性能的第一次加载体验。\n(0, _reactDom.render)(_react2.default.createElement(\n  _reactRedux.Provider,\n  { store: store },\n  _react2.default.createElement(\n    _reactRouter.Router,\n    { history: history },\n    _react2.default.createElement(\n      _reactRouter.Route,\n      { path: '/', component: _components2.default },\n      _react2.default.createElement(_reactRouter.Route, { path: '/foo', component: _components2.default }),\n      _react2.default.createElement(_reactRouter.Route, { path: '/bar', component: _components2.default })\n    )\n  )\n), rootEl);\n\n/***/ })\n\n})\n\n\n// WEBPACK FOOTER //\n// 0.b960285b401a7685abb4.hot-update.js","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n//import createHistory from \"history/createBrowserHistory\";\nimport { Router, Route, browserHistory } from 'react-router';\nimport { syncHistoryWithStore, routerReducer } from 'react-router-redux';\nimport configureStore from './store/configureStore';\nimport Index from './components';\nimport { h, Component } from 'preact';\n\nconst rootEl = document.getElementById('root');\n\nconst store = configureStore;\nconst history = syncHistoryWithStore(browserHistory, store);\n//const history = createHistory();\n \n// Get the current location.\n//const location = history.location\n \n// Listen for changes to the current location.\n// const unlisten = history.listen((location, action) => {\n//   // location is an object like window.location\n//   console.log(action, location.pathname, location.state);\n\n// })\n \n// Use push, replace, and go to navigate around.\n// history.push('/', { some: 'state' })\n \n// // To stop listening, call the function returned from listen().\n// unlisten()\n//react-redux 提供Provider组件，可以让容器组件拿到state。\n//Provider在根组件外面包了一层，这样一来，根组件的所有子组件就默认都可以拿到state了。\n//render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。\n//再次render()，只附加事件处理程序，从而拥有非常高性能的第一次加载体验。\nrender(\n  <Provider store={store}>\n    <Router history={history}>\n      <Route path=\"/\" component={Index}>\n        <Route path=\"/foo\" component={Index}/>\n        <Route path=\"/bar\" component={Index}/>\n      </Route>\n    </Router>\n  </Provider>,\n  rootEl\n)\n\n\n\n// WEBPACK FOOTER //\n// ./public/client/index.js"],"sourceRoot":""}